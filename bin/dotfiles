#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    # Check for Homebrew
    if ! type_exists 'brew'; then
        e_header "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi

    printf "Updating packages...\n"
    # Install Homebrew formulae
    run_brew
fi

# Install Fisher
if [ ! -f ~/.config/fish/functions/fisher.fish ]; then
    e_header "Installing Fisher..."
    /bin/bash -c "$(curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish)"
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "shell/bashrc"                          ".bashrc"
    link "shell/.tmux.conf"                      ".tmux.conf"
    link "shell/.config/alacritty/alacritty.yml" ".config/alacritty/alacritty.yml"
    link "shell/.config/fish/config.fish"        ".config/fish/config.fish"
    link "shell/.config/fish/fishfile"           ".config/fish/fishfile"

    e_success "Dotfiles update complete!"
}

if ! type_exists 'rustup'; then
    e_header "Installing Rust..."
    /bin/bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh)"
fi

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
else
    printf "Aborting...\n"
    exit 1
fi

# Ask before potentially overwriting macOS defaults
seek_confirmation "Warning: This step may modify your macOS system defaults."

if is_confirmed; then
    bash ./bin/macos
    e_success "macOS settings updated! You may need to restart."
else
    printf "Skipped macOS settings update.\n"
fi
